package io.github.pmckeown.dependencytrack.suppressions;

import io.github.pmckeown.util.Logger;
import javax.inject.Inject;

/**
 * Validates the vulnerability suppression object.
 *
 * @author Thomas Hucke
 */
public class VulnerabilitySuppressionValidator {

  private final Logger logger;

  @Inject
  public VulnerabilitySuppressionValidator(Logger logger) {
    this.logger = logger;
  }

  public boolean isInValidVulnerabilitySuppression(VulnerabilitySuppression vulnerabilitySuppression) {
    return !this.isValidVulnerabilitySuppression(vulnerabilitySuppression);
  }

  public boolean isValidVulnerabilitySuppression(VulnerabilitySuppression vulnerabilitySuppression) {
    boolean isValid = true;
    String errorText = "";
    if (null == vulnerabilitySuppression) {
      errorText = "Vulnerability suppression is null";
      isValid = false;
    }
    if (isValid && vulnerabilitySuppression.getSource().isEmpty()) {
      errorText = String.format("Vulnerability suppression source is empty: %s", vulnerabilitySuppression);
      isValid = false;
    }
    if (isValid && vulnerabilitySuppression.getVulnId().isEmpty()) {
      errorText = String.format("Vulnerability suppression vulnId is empty: %s", vulnerabilitySuppression);
      isValid = false;
    }
    if ( !isValid ) {
      logger.error(errorText);
    }
    return isValid;
  }
}
