package io.github.pmckeown.dependencytrack.suppressions;

import static java.lang.String.format;

import io.github.pmckeown.util.Logger;
import javax.inject.Inject;

public class VulnerabilitySuppressionValidator {

  private final Logger logger;

  @Inject
  public VulnerabilitySuppressionValidator(Logger logger) {
    this.logger = logger;
  }

  public boolean isInValidVulnerabilitySuppression(VulnerabilitySuppression vulnerabilitySuppression) {
    return !this.isValidVulnerabilitySuppression(vulnerabilitySuppression);
  }

  public boolean isValidVulnerabilitySuppression(VulnerabilitySuppression vulnerabilitySuppression) {
    boolean isValid = true;
    String errorText = "";
    if (vulnerabilitySuppression == null) {
      errorText = "is null";
      isValid = false;
    }
    if (vulnerabilitySuppression.getSource().isEmpty()) {
      errorText = "source is empty";
      isValid = false;
    }
    if (vulnerabilitySuppression.getVulnId().isEmpty()) {
      errorText = "vulnId is empty";
      isValid = false;
    }
    if ( !isValid ) {
      logger.error(format("Vulnerability suppression %s: %s", errorText, vulnerabilitySuppression.toString()));
    }
    return isValid;
  }
}
