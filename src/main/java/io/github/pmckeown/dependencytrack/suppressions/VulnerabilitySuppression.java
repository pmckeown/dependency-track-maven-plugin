package io.github.pmckeown.dependencytrack.suppressions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.pmckeown.dependencytrack.finding.AnalysisState;
import java.io.Serializable;
import java.util.Objects;
import javax.xml.bind.annotation.XmlElement;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

/**
 * Maven configuration for a single vulnerability suppression
 *
 * @author Thomas Hucke
 */
@SuppressWarnings("unused")
public class VulnerabilitySuppression extends AbstractVulnerability implements Serializable {

    private String source;

    private String vulnId;

    private String analysisDetails;

    private AnalysisState analysisState;

    private AnalysisJustificationEnum analysisJustification;

    private AnalysisVendorResponseEnum analysisResponse;

    public VulnerabilitySuppression() {}

    @JsonCreator
    public VulnerabilitySuppression(
        @JsonProperty("source") String source,
        @JsonProperty("vulnId") String vulnId,
        @JsonProperty("analysisDetails") String analysisDetails,
        @JsonProperty("analysisState") AnalysisState analysisState,
        @JsonProperty("analysisJustification") AnalysisJustificationEnum analysisJustification,
        @JsonProperty("analysisResponse") AnalysisVendorResponseEnum analysisResponse
    ){
        this.source = source;
        this.vulnId = vulnId;
        this.analysisDetails = analysisDetails;
        this.analysisState = analysisState;
        this.analysisResponse = analysisResponse;

        // Justification only relevant if the state is NOT_AFFECTED
        if (analysisState == AnalysisState.NOT_AFFECTED && analysisJustification != null) {
            this.analysisJustification = analysisJustification;
        } else {
            this.analysisJustification = null;
        }

    }

    @XmlElement(name = "source")
    public String getSource() {
        return source;
    }

    @XmlElement(name = "vulnId")
    public String getVulnId() {
        return vulnId;
    }

    @XmlElement(name = "analysisDetails")
    public String getAnalysisDetails() {
        return analysisDetails;
    }

    @XmlElement(name = "analysisState")
    public AnalysisState getAnalysisState() {
        return analysisState;
    }

    @XmlElement(name = "analysisJustification")
    public AnalysisJustificationEnum getAnalysisJustification() {
        return analysisJustification;
    }

    @XmlElement(name = "analysisResponse")
    public AnalysisVendorResponseEnum getAnalysisResponse() {
        return analysisResponse;
    }

    @Override
    public int hashCode() {
        return Objects.hash(source, vulnId, analysisDetails);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (obj instanceof AbstractVulnerability) {
            AbstractVulnerability other = (AbstractVulnerability) obj;
            return Objects.equals(getVulnerabilityIdString(), other.getVulnerabilityIdString()) ;
        } else return false;
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);
    }

    @Override
    public String getVulnerabilityIdString() {
        return source + ":" + vulnId;
    }
}