package io.github.pmckeown.dependencytrack.suppressions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.pmckeown.dependencytrack.finding.Analysis.State;
import io.github.pmckeown.dependencytrack.finding.Finding;
import io.github.pmckeown.dependencytrack.suppressions.Analysis.AnalysisJustification;
import io.github.pmckeown.dependencytrack.suppressions.Analysis.AnalysisVendorResponse;
import java.util.Objects;
import javax.xml.bind.annotation.XmlElement;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

public final class VulnerabilitySuppression {

    private final String source;
    private final String vulnId;
    private final String analysisDetails;
    private final State analysisState;
    private final AnalysisJustification analysisJustification;
    private final AnalysisVendorResponse analysisResponse;

    @JsonCreator
    public VulnerabilitySuppression(
        @JsonProperty("source") String source,
        @JsonProperty("vulnId") String vulnId,
        @JsonProperty("analysisDetails") String analysisDetails,
        @JsonProperty("analysisState") State analysisState,
        @JsonProperty("analysisJustification") AnalysisJustification analysisJustification,
        @JsonProperty("analysisResponse") AnalysisVendorResponse analysisResponse
    ){
        this.source = source;
        this.vulnId = vulnId;
        this.analysisDetails = analysisDetails;
        this.analysisState = analysisState;
        this.analysisResponse = analysisResponse;

        // Justification only relevant if the state is NOT_AFFECTED
        if (analysisState == State.NOT_AFFECTED && analysisJustification != null) {
            this.analysisJustification = analysisJustification;
        } else {
            this.analysisJustification = null;
        }

    }

    @XmlElement
    public AnalysisVendorResponse getAnalysisResponse() {
        return analysisResponse;
    }

    @XmlElement
    public AnalysisJustification getAnalysisJustification() {
        return analysisJustification;
    }

    @XmlElement
    public String getAnalysisDetails() {
        return analysisDetails;
    }

    @XmlElement
    public State getAnalysisState() {
        return analysisState;
    }

    @XmlElement
    public String getVulnId() {
        return vulnId;
    }

    @XmlElement
    public String getSource() {
        return source;
    }

    public Boolean matchesFinding(Finding finding) {
        return finding.getVulnerability().getSource().equals(getSource()) &&
            finding.getVulnerability().getVulnId().equals(getVulnId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(source, vulnId, analysisDetails);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        VulnerabilitySuppression other = (VulnerabilitySuppression) obj;
        return Objects.equals(source, other.source) &&
            Objects.equals(vulnId, other.vulnId);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);
    }
}